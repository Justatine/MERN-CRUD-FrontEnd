{"ast":null,"code":"import { customFetch } from \"../helpers/axios\";\nconst API_URL = process.env.REACT_APP_API_URL;\nconst token = localStorage.getItem('accessToken');\nconsole.log('token: ', token);\nexport const loginUser = async data => {\n  try {\n    const res = await fetch(`${API_URL}/api/auth/login`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: 'include',\n      body: JSON.stringify(data)\n    });\n    if (!res.ok) {\n      throw new Error('Failed to fetch user profile');\n    }\n    const result = await res.json();\n    localStorage.setItem('accessToken', result.accessToken);\n    return {\n      message: result.message,\n      status: result.status,\n      accessToken: result.accessToken,\n      userRole: result.userRole\n    };\n  } catch (error) {\n    console.log('Error signing in: ', error);\n    throw error;\n  }\n};\nconst getTokenFromLocalStorage = () => {\n  return localStorage.getItem('accessToken');\n};\ncustomFetch.interceptors.response.use(response => {\n  return response;\n}, async function (error) {\n  const originalRequest = error.config;\n  if (error.response.status === 403 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    const resp = await refreshToken();\n    const access_token = resp.response.accessToken;\n    addTokenToLocalStorage(access_token);\n    customFetch.defaults.headers.common[\"Authorization\"] = `Bearer ${access_token}`;\n    return customFetch(originalRequest);\n  }\n  return Promise.reject(error);\n});\nconst refreshToken = async () => {\n  try {\n    const resp = await customFetch.get(\"/refresh\");\n    console.log(\"refresh token\", resp.data);\n    return resp.data;\n  } catch (e) {\n    console.log(\"Error\", e);\n  }\n};\n\n// const fetchNewAccessToken = async () => {\n//   try {\n//     const response = await fetch(`${API_URL}/api/refresh`, {\n//       method: 'GET',\n//       credentials: 'include',\n//     });\n\n//     if (response.ok) {\n//       console.log('status ok')\n//       // const data = await response.json();\n//       // console.log('New access token:', data.accessToken);\n\n//       // localStorage.setItem('accessToken', data.accessToken);\n\n//       // return data.accessToken;\n//     } else {\n//       console.log('status not ok')\n//       if (response.status === 401) {\n//         console.log('status 401')\n\n//       }\n//       throw new Error('Failed to fetch new access token');\n//     }\n//   } catch (error) {\n//     console.error('Error:', error);\n//     // Handle error appropriately, possibly by redirecting to login\n//     throw error;\n//   }\n// };\n\nexport const fetchWithAuth = async (url, options = {}) => {\n  try {\n    let accessToken = localStorage.getItem('accessToken');\n    if (!accessToken) throw new Error('No access token found');\n    options.headers = {\n      ...options.headers,\n      'Authorization': `Bearer ${accessToken}`\n    };\n    let res = await fetch(url, options);\n    if (res.status === 403) {\n      console.log('Access token expired, attempting to refresh...');\n      // accessToken = await fetchNewAccessToken();\n      accessToken = await refreshToken();\n      if (accessToken) {\n        options.headers['Authorization'] = `Bearer ${accessToken}`;\n        res = await fetch(url, options);\n      } else {\n        throw new Error('Failed to refresh token');\n      }\n    }\n    if (!res.ok) {\n      const errorMessage = await res.text();\n      throw new Error(`Request failed with status ${res.status}: ${errorMessage}`);\n    }\n    return await res.json();\n  } catch (error) {\n    console.error('Error fetching with auth:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["customFetch","API_URL","process","env","REACT_APP_API_URL","token","localStorage","getItem","console","log","loginUser","data","res","fetch","method","headers","credentials","body","JSON","stringify","ok","Error","result","json","setItem","accessToken","message","status","userRole","error","getTokenFromLocalStorage","interceptors","response","use","originalRequest","config","_retry","resp","refreshToken","access_token","addTokenToLocalStorage","defaults","common","Promise","reject","get","e","fetchWithAuth","url","options","errorMessage","text"],"sources":["C:/Users/Jan Kenneth/Desktop/projects/templates/MERN/student_frontend/src/assets/services/authServices.jsx"],"sourcesContent":["import { customFetch } from \"../helpers/axios\";\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\nconst token = localStorage.getItem('accessToken');\r\n\r\nconsole.log('token: ',token)\r\n\r\nexport const loginUser = async (data) => {\r\n  try {\r\n    const res = await fetch(`${API_URL}/api/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(data)    \r\n    })\r\n    \r\n    if (!res.ok) {\r\n        throw new Error('Failed to fetch user profile');\r\n    }\r\n\r\n    const result = await res.json()\r\n    localStorage.setItem('accessToken', result.accessToken); \r\n\r\n    return { \r\n        message: result.message,\r\n        status: result.status,\r\n        accessToken: result.accessToken,\r\n        userRole: result.userRole\r\n    }\r\n} catch (error) {\r\n    console.log('Error signing in: ', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nconst getTokenFromLocalStorage = () => {\r\n  return localStorage.getItem('accessToken');\r\n};\r\n\r\ncustomFetch.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async function (error) {\r\n    const originalRequest = error.config;\r\n    if (error.response.status === 403 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n\r\n      const resp = await refreshToken();\r\n\r\n      const access_token = resp.response.accessToken;\r\n\r\n      addTokenToLocalStorage(access_token);\r\n      customFetch.defaults.headers.common[\r\n        \"Authorization\"\r\n      ] = `Bearer ${access_token}`;\r\n      return customFetch(originalRequest);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst refreshToken = async () => {\r\n  try {\r\n    const resp = await customFetch.get(\"/refresh\");\r\n    console.log(\"refresh token\", resp.data);\r\n    return resp.data;\r\n  } catch (e) {\r\n    console.log(\"Error\",e);   \r\n  }\r\n};\r\n\r\n// const fetchNewAccessToken = async () => {\r\n//   try {\r\n//     const response = await fetch(`${API_URL}/api/refresh`, {\r\n//       method: 'GET',\r\n//       credentials: 'include',\r\n//     });\r\n\r\n//     if (response.ok) {\r\n//       console.log('status ok')\r\n//       // const data = await response.json();\r\n//       // console.log('New access token:', data.accessToken);\r\n\r\n//       // localStorage.setItem('accessToken', data.accessToken);\r\n\r\n//       // return data.accessToken;\r\n//     } else {\r\n//       console.log('status not ok')\r\n//       if (response.status === 401) {\r\n//         console.log('status 401')\r\n        \r\n//       }\r\n//       throw new Error('Failed to fetch new access token');\r\n//     }\r\n//   } catch (error) {\r\n//     console.error('Error:', error);\r\n//     // Handle error appropriately, possibly by redirecting to login\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\nexport const fetchWithAuth = async (url, options = {}) => {\r\n  try {\r\n    let accessToken = localStorage.getItem('accessToken');\r\n\r\n    if (!accessToken) throw new Error('No access token found');\r\n\r\n    options.headers = {\r\n      ...options.headers,\r\n      'Authorization': `Bearer ${accessToken}`,\r\n    };\r\n\r\n    let res = await fetch(url, options);\r\n\r\n    if (res.status === 403) {\r\n      console.log('Access token expired, attempting to refresh...');\r\n      // accessToken = await fetchNewAccessToken();\r\n      accessToken = await refreshToken();\r\n      \r\n      if (accessToken) {\r\n        options.headers['Authorization'] = `Bearer ${accessToken}`;\r\n        res = await fetch(url, options);\r\n      } else {\r\n        throw new Error('Failed to refresh token');\r\n      }\r\n    }\r\n\r\n    if (!res.ok) {\r\n      const errorMessage = await res.text();\r\n      throw new Error(`Request failed with status ${res.status}: ${errorMessage}`);\r\n    }\r\n\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error('Error fetching with auth:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}