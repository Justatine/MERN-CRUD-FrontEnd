{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api'\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // Check if the error is due to an expired access token (401 status code)\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // Attempt to refresh the access token\n      const response = await axios.post('http://localhost:5000/api/refresh', {}, {\n        withCredentials: true\n      });\n      const {\n        accessToken\n      } = response.data;\n\n      // Store the new access token and retry the original request\n      localStorage.setItem('accessToken', accessToken);\n      originalRequest.headers.Authorization = `Bearer ${accessToken}`;\n      return axios(originalRequest);\n    } catch (error) {\n      // Handle the case where the refresh token is invalid or expired\n      console.error('Failed to refresh token:', error);\n      // Optionally, redirect to login page or perform other error handling\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","originalRequest","status","_retry","post","withCredentials","accessToken","data","setItem","console"],"sources":["C:/Users/Jan Kenneth/Desktop/projects/templates/MERN/student_frontend/src/assets/helpers/axios.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api',\r\n});\r\n\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('accessToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Response interceptor to handle token refresh\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    // Check if the error is due to an expired access token (401 status code)\r\n    if (error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n\r\n      try {\r\n        // Attempt to refresh the access token\r\n        const response = await axios.post('http://localhost:5000/api/refresh', {}, { withCredentials: true });\r\n        const { accessToken } = response.data;\r\n\r\n        // Store the new access token and retry the original request\r\n        localStorage.setItem('accessToken', accessToken);\r\n        originalRequest.headers.Authorization = `Bearer ${accessToken}`;\r\n        return axios(originalRequest);\r\n      } catch (error) {\r\n        // Handle the case where the refresh token is invalid or expired\r\n        console.error('Failed to refresh token:', error);\r\n        // Optionally, redirect to login page or perform other error handling\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;AAEFF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACjD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAM,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAZ,GAAG,CAACG,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC1BU,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EACf,MAAMI,eAAe,GAAGJ,KAAK,CAACN,MAAM;;EAEpC;EACA,IAAIM,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC5DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF;MACA,MAAMH,QAAQ,GAAG,MAAMhB,KAAK,CAACoB,IAAI,CAAC,mCAAmC,EAAE,CAAC,CAAC,EAAE;QAAEC,eAAe,EAAE;MAAK,CAAC,CAAC;MACrG,MAAM;QAAEC;MAAY,CAAC,GAAGN,QAAQ,CAACO,IAAI;;MAErC;MACAd,YAAY,CAACe,OAAO,CAAC,aAAa,EAAEF,WAAW,CAAC;MAChDL,eAAe,CAACN,OAAO,CAACC,aAAa,GAAG,UAAUU,WAAW,EAAE;MAC/D,OAAOtB,KAAK,CAACiB,eAAe,CAAC;IAC/B,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACd;MACAY,OAAO,CAACZ,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD;IACF;EACF;EAEA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}