{"ast":null,"code":"import axios from \"axios\";\nimport api from \"../helpers/axios\";\nconst API_URL = process.env.REACT_APP_API_URL;\nconst token = localStorage.getItem('accessToken');\nconsole.log('token: ', token);\nexport const loginUser = async data => {\n  try {\n    const res = await fetch(`${API_URL}/api/auth/login`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: 'include',\n      body: JSON.stringify(data)\n    });\n    if (!res.ok) {\n      throw new Error('Failed to fetch user profile');\n    }\n    const result = await res.json();\n    localStorage.setItem('accessToken', result.accessToken);\n    return {\n      message: result.message,\n      status: result.status,\n      accessToken: result.accessToken,\n      userRole: result.userRole\n    };\n  } catch (error) {\n    console.log('Error signing in: ', error);\n    throw error;\n  }\n};\n\n// const getTokenFromLocalStorage = () => {\n//   return localStorage.getItem('accessToken');\n// };\n\n// const addTokenToLocalStorage = (token) => {\n//   localStorage.setItem('accessToken', token);\n// };\n\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // If the error status is 401 and there is no originalRequest._retry flag,\n  // it means the token has expired and we need to refresh it\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('accessToken');\n      const response = await axios.post('http://localhost:5000/api/refresh', {\n        refreshToken\n      });\n      const {\n        token\n      } = response.accessToken;\n      localStorage.setItem('accessToken', token);\n\n      // Retry the original request with the new token\n      originalRequest.headers.Authorization = `Bearer ${token}`;\n      return axios(originalRequest);\n    } catch (error) {\n      // Handle refresh token error or redirect to login\n    }\n  }\n  return Promise.reject(error);\n});\nconst refreshToken = async () => {\n  // Add a response interceptor\n\n  // try {\n  //   const resp = await api.get(\"/refresh\");\n  //   console.log(\"refresh token\", resp.data);\n  //   return resp.data;\n  // } catch (e) {\n  //   console.log(\"Error\",e);   \n  // }\n};\n\n// const fetchNewAccessToken = async () => {\n//   try {\n//     const response = await fetch(`${API_URL}/api/refresh`, {\n//       method: 'GET',\n//       credentials: 'include',\n//     });\n\n//     if (response.ok) {\n//       console.log('status ok')\n//       // const data = await response.json();\n//       // console.log('New access token:', data.accessToken);\n\n//       // localStorage.setItem('accessToken', data.accessToken);\n\n//       // return data.accessToken;\n//     } else {\n//       console.log('status not ok')\n//       if (response.status === 401) {\n//         console.log('status 401')\n\n//       }\n//       throw new Error('Failed to fetch new access token');\n//     }\n//   } catch (error) {\n//     console.error('Error:', error);\n//     // Handle error appropriately, possibly by redirecting to login\n//     throw error;\n//   }\n// };\n\nexport const fetchWithAuth = async (url, options = {}) => {\n  try {\n    let accessToken = localStorage.getItem('accessToken');\n    if (!accessToken) throw new Error('No access token found');\n    options.headers = {\n      ...options.headers,\n      'Authorization': `Bearer ${accessToken}`\n    };\n    let res = await fetch(url, options);\n    if (res.status === 403) {\n      console.log('Access token expired, attempting to refresh...');\n      // accessToken = await fetchNewAccessToken();\n      accessToken = await refreshToken();\n      if (accessToken) {\n        options.headers['Authorization'] = `Bearer ${accessToken}`;\n        res = await fetch(url, options);\n      } else {\n        throw new Error('Failed to refresh token');\n      }\n    }\n    if (!res.ok) {\n      const errorMessage = await res.text();\n      throw new Error(`Request failed with status ${res.status}: ${errorMessage}`);\n    }\n    return await res.json();\n  } catch (error) {\n    console.error('Error fetching with auth:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","api","API_URL","process","env","REACT_APP_API_URL","token","localStorage","getItem","console","log","loginUser","data","res","fetch","method","headers","credentials","body","JSON","stringify","ok","Error","result","json","setItem","accessToken","message","status","userRole","error","interceptors","response","use","originalRequest","config","_retry","refreshToken","post","Authorization","Promise","reject","fetchWithAuth","url","options","errorMessage","text"],"sources":["C:/Users/Jan Kenneth/Desktop/projects/templates/MERN/student_frontend/src/assets/services/authServices.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport api from \"../helpers/axios\";\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nconst token = localStorage.getItem('accessToken');\r\nconsole.log('token: ',token)\r\n\r\nexport const loginUser = async (data) => {\r\n  try {\r\n    const res = await fetch(`${API_URL}/api/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(data)    \r\n    })\r\n    \r\n    if (!res.ok) {\r\n        throw new Error('Failed to fetch user profile');\r\n    }\r\n\r\n    const result = await res.json()\r\n    localStorage.setItem('accessToken', result.accessToken); \r\n\r\n    return { \r\n        message: result.message,\r\n        status: result.status,\r\n        accessToken: result.accessToken,\r\n        userRole: result.userRole\r\n    }\r\n} catch (error) {\r\n    console.log('Error signing in: ', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// const getTokenFromLocalStorage = () => {\r\n//   return localStorage.getItem('accessToken');\r\n// };\r\n\r\n// const addTokenToLocalStorage = (token) => {\r\n//   localStorage.setItem('accessToken', token);\r\n// };\r\n\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    // If the error status is 401 and there is no originalRequest._retry flag,\r\n    // it means the token has expired and we need to refresh it\r\n    if (error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n\r\n      try {\r\n        const refreshToken = localStorage.getItem('accessToken');\r\n        const response = await axios.post('http://localhost:5000/api/refresh', { refreshToken });\r\n        const { token } = response.accessToken;\r\n\r\n        localStorage.setItem('accessToken', token);\r\n\r\n        // Retry the original request with the new token\r\n        originalRequest.headers.Authorization = `Bearer ${token}`;\r\n        return axios(originalRequest);\r\n      } catch (error) {\r\n        // Handle refresh token error or redirect to login\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst refreshToken = async () => {\r\n  // Add a response interceptor\r\n\r\n  // try {\r\n  //   const resp = await api.get(\"/refresh\");\r\n  //   console.log(\"refresh token\", resp.data);\r\n  //   return resp.data;\r\n  // } catch (e) {\r\n  //   console.log(\"Error\",e);   \r\n  // }\r\n};\r\n\r\n// const fetchNewAccessToken = async () => {\r\n//   try {\r\n//     const response = await fetch(`${API_URL}/api/refresh`, {\r\n//       method: 'GET',\r\n//       credentials: 'include',\r\n//     });\r\n\r\n//     if (response.ok) {\r\n//       console.log('status ok')\r\n//       // const data = await response.json();\r\n//       // console.log('New access token:', data.accessToken);\r\n\r\n//       // localStorage.setItem('accessToken', data.accessToken);\r\n\r\n//       // return data.accessToken;\r\n//     } else {\r\n//       console.log('status not ok')\r\n//       if (response.status === 401) {\r\n//         console.log('status 401')\r\n        \r\n//       }\r\n//       throw new Error('Failed to fetch new access token');\r\n//     }\r\n//   } catch (error) {\r\n//     console.error('Error:', error);\r\n//     // Handle error appropriately, possibly by redirecting to login\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\nexport const fetchWithAuth = async (url, options = {}) => {\r\n  try {\r\n    let accessToken = localStorage.getItem('accessToken');\r\n\r\n    if (!accessToken) throw new Error('No access token found');\r\n\r\n    options.headers = {\r\n      ...options.headers,\r\n      'Authorization': `Bearer ${accessToken}`,\r\n    };\r\n\r\n    let res = await fetch(url, options);\r\n\r\n    if (res.status === 403) {\r\n      console.log('Access token expired, attempting to refresh...');\r\n      // accessToken = await fetchNewAccessToken();\r\n      accessToken = await refreshToken();\r\n      \r\n      if (accessToken) {\r\n        options.headers['Authorization'] = `Bearer ${accessToken}`;\r\n        res = await fetch(url, options);\r\n      } else {\r\n        throw new Error('Failed to refresh token');\r\n      }\r\n    }\r\n\r\n    if (!res.ok) {\r\n      const errorMessage = await res.text();\r\n      throw new Error(`Request failed with status ${res.status}: ${errorMessage}`);\r\n    }\r\n\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error('Error fetching with auth:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}