{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL;\nconst token = localStorage.getItem('accessToken');\nconsole.log('token: ', token);\nexport const loginUser = async data => {\n  try {\n    const res = await fetch(`${API_URL}/api/auth/login`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: 'include',\n      body: JSON.stringify(data)\n    });\n    if (!res.ok) {\n      throw new Error('Failed to fetch user profile');\n    }\n    const result = await res.json();\n    return {\n      message: result.message,\n      status: result.status,\n      accesToken: result.accessToken,\n      userRole: result.userRole\n    };\n  } catch (error) {\n    console.log('Error signing in: ', error);\n    throw error;\n  }\n};\nconst fetchNewAccessToken = async () => {\n  try {\n    const response = await fetch('http://localhost:5000/api/refresh', {\n      method: 'GET',\n      credentials: 'include' // to include cookies in the request\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log('New access token:', data.accessToken);\n\n      // Store the new access token (e.g., in local storage)\n      localStorage.setItem('accessToken', data.accessToken);\n      return data.accessToken;\n    } else {\n      throw new Error('Failed to fetch new access token');\n    }\n  } catch (error) {\n    console.error('Error:', error);\n    // Handle error appropriately, possibly by redirecting to login\n  }\n};\nexport const fetchWithAuth = async (url, options = {}) => {\n  try {\n    let accessToken = localStorage.getItem('accessToken');\n    if (!accessToken) throw new Error('No access token found');\n    options.headers = {\n      ...options.headers,\n      'Authorization': `Bearer ${accessToken}`\n    };\n    let res = await fetch(url, options);\n    if (res.status === 403) {\n      console.log('Access token expired, attempting to refresh...');\n      accessToken = await fetchNewAccessToken();\n      if (accessToken) {\n        options.headers['Authorization'] = `Bearer ${accessToken}`;\n        res = await fetch(url, options);\n      } else {\n        throw new Error('Failed to refresh token');\n      }\n    }\n    if (!res.ok) {\n      const errorMessage = await res.text();\n      throw new Error(`Request failed with status ${res.status}: ${errorMessage}`);\n    }\n    return await res.json();\n  } catch (error) {\n    console.error('Error fetching with auth:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","token","localStorage","getItem","console","log","loginUser","data","res","fetch","method","headers","credentials","body","JSON","stringify","ok","Error","result","json","message","status","accesToken","accessToken","userRole","error","fetchNewAccessToken","response","setItem","fetchWithAuth","url","options","errorMessage","text"],"sources":["C:/Users/Jan Kenneth/Desktop/projects/templates/MERN/student_frontend/src/assets/services/authServices.jsx"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL;\r\nconst token = localStorage.getItem('accessToken');\r\n\r\nconsole.log('token: ',token)\r\n\r\nexport const loginUser = async (data) => {\r\n  try {\r\n    const res = await fetch(`${API_URL}/api/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(data)    \r\n    })\r\n    \r\n    if (!res.ok) {\r\n        throw new Error('Failed to fetch user profile');\r\n    }\r\n\r\n    const result = await res.json()\r\n    return { \r\n        message: result.message,\r\n        status: result.status,\r\n        accesToken: result.accessToken,\r\n        userRole: result.userRole\r\n    }\r\n} catch (error) {\r\n    console.log('Error signing in: ', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nconst fetchNewAccessToken = async () => {\r\n  try {\r\n      const response = await fetch('http://localhost:5000/api/refresh', {\r\n          method: 'GET',\r\n          credentials: 'include', // to include cookies in the request\r\n      });\r\n\r\n      if (response.ok) {\r\n          const data = await response.json();\r\n          console.log('New access token:', data.accessToken);\r\n\r\n          // Store the new access token (e.g., in local storage)\r\n          localStorage.setItem('accessToken', data.accessToken);\r\n\r\n          return data.accessToken;\r\n      } else {\r\n          throw new Error('Failed to fetch new access token');\r\n      }\r\n  } catch (error) {\r\n      console.error('Error:', error);\r\n      // Handle error appropriately, possibly by redirecting to login\r\n  }\r\n};\r\n\r\nexport const fetchWithAuth = async (url, options = {}) => {\r\n  try {\r\n    let accessToken = localStorage.getItem('accessToken');\r\n\r\n    if (!accessToken) throw new Error('No access token found');\r\n\r\n    options.headers = {\r\n      ...options.headers,\r\n      'Authorization': `Bearer ${accessToken}`,\r\n    };\r\n\r\n    let res = await fetch(url, options);\r\n\r\n    if (res.status === 403) {\r\n      console.log('Access token expired, attempting to refresh...');\r\n      accessToken = await fetchNewAccessToken();\r\n\r\n      if (accessToken) {\r\n        options.headers['Authorization'] = `Bearer ${accessToken}`;\r\n        res = await fetch(url, options);\r\n      } else {\r\n        throw new Error('Failed to refresh token');\r\n      }\r\n    }\r\n\r\n    if (!res.ok) {\r\n      const errorMessage = await res.text(); \r\n      throw new Error(`Request failed with status ${res.status}: ${errorMessage}`);\r\n    }\r\n\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error('Error fetching with auth:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}