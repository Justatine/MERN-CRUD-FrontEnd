{"ast":null,"code":"import api from \"../helpers/axios\";\nconst API_URL = process.env.REACT_APP_API_URL;\nconst token = localStorage.getItem('accessToken');\nconsole.log('token: ', token);\nexport const loginUser = async data => {\n  try {\n    const res = await fetch(`${API_URL}/api/auth/login`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: 'include',\n      body: JSON.stringify(data)\n    });\n    if (!res.ok) {\n      throw new Error('Failed to fetch user profile');\n    }\n    const result = await res.json();\n    localStorage.setItem('accessToken', result.accessToken);\n    return {\n      message: result.message,\n      status: result.status,\n      accessToken: result.accessToken,\n      userRole: result.userRole\n    };\n  } catch (error) {\n    console.log('Error signing in: ', error);\n    throw error;\n  }\n};\n\n// const getTokenFromLocalStorage = () => {\n//   return localStorage.getItem('accessToken');\n// };\n\n// const addTokenToLocalStorage = (token) => {\n//   localStorage.setItem('accessToken', token);\n// };\n\nexport const fetchWithAuth = async (url, options = {}) => {\n  try {\n    let accessToken = localStorage.getItem('accessToken');\n    if (!accessToken) throw new Error('No access token found');\n\n    // Set the Authorization header for the request\n    options.headers = {\n      ...options.headers,\n      'Authorization': `Bearer ${accessToken}`\n    };\n    let res = await fetch(url, options);\n\n    // Check if the response indicates the access token is expired\n    if (res.status === 403) {\n      console.log('Access token expired, attempting to refresh...');\n\n      // Attempt to refresh the token\n      accessToken = await refreshToken();\n      if (accessToken) {\n        options.headers['Authorization'] = `Bearer ${accessToken}`;\n        res = await fetch(url, options);\n      } else {\n        throw new Error('Failed to refresh token');\n      }\n    }\n    if (!res.ok) {\n      const errorMessage = await res.text();\n      throw new Error(`Request failed with status ${res.status}: ${errorMessage}`);\n    }\n    return await res.json();\n  } catch (error) {\n    console.error('Error fetching with auth:', error);\n    throw error;\n  }\n};\n\n// Function to refresh the access token (using cookies for the refresh token)\nconst refreshToken = async () => {\n  try {\n    const response = await api.post('/refresh', {}, {\n      withCredentials: true\n    });\n    const {\n      accessToken\n    } = response.data;\n\n    // Update the local storage with the new access token\n    localStorage.setItem('accessToken', accessToken);\n    return accessToken;\n  } catch (error) {\n    console.error('Failed to refresh token:', error);\n    // Optionally, handle token refresh errors (e.g., redirect to login page)\n    return null;\n  }\n};\n\n// const refreshToken = async () => {\n//   // Add a response interceptor\n//   api.interceptors.response.use(\n//     (response) => response,\n//     async (error) => {\n//       const originalRequest = error.config;\n\n//       // If the error status is 401 and there is no originalRequest._retry flag,\n//       // it means the token has expired and we need to refresh it\n//       if (error.response.status === 401 && !originalRequest._retry) {\n//         originalRequest._retry = true;\n\n//         try {\n//           const refreshToken = localStorage.getItem('accessToken');\n//           const response = await axios.post('http://localhost:5000/api/refresh', { refreshToken });\n//           const { token } = response.accessToken;\n\n//           localStorage.setItem('accessToken', token);\n\n//           // Retry the original request with the new token\n//           originalRequest.headers.Authorization = `Bearer ${token}`;\n//           return axios(originalRequest);\n//         } catch (error) {\n//           // Handle refresh token error or redirect to login\n//         }\n//       }\n\n//       return Promise.reject(error);\n//     }\n//   );\n//   // try {\n//   //   const resp = await api.get(\"/refresh\");\n//   //   console.log(\"refresh token\", resp.data);\n//   //   return resp.data;\n//   // } catch (e) {\n//   //   console.log(\"Error\",e);   \n//   // }\n// };\n\n// export const fetchWithAuth = async (url, options = {}) => {\n//   try {\n//     let accessToken = localStorage.getItem('accessToken');\n\n//     if (!accessToken) throw new Error('No access token found');\n\n//     options.headers = {\n//       ...options.headers,\n//       'Authorization': `Bearer ${accessToken}`,\n//     };\n\n//     let res = await fetch(url, options);\n\n//     if (res.status === 403) {\n//       console.log('Access token expired, attempting to refresh...');\n//       // accessToken = await fetchNewAccessToken();\n//       accessToken = await refreshToken();\n\n//       if (accessToken) {\n//         options.headers['Authorization'] = `Bearer ${accessToken}`;\n//         res = await fetch(url, options);\n//       } else {\n//         throw new Error('Failed to refresh token');\n//       }\n//     }\n\n//     if (!res.ok) {\n//       const errorMessage = await res.text();\n//       throw new Error(`Request failed with status ${res.status}: ${errorMessage}`);\n//     }\n\n//     return await res.json();\n//   } catch (error) {\n//     console.error('Error fetching with auth:', error);\n//     throw error;\n//   }\n// };\n\n// const fetchNewAccessToken = async () => {\n//   try {\n//     const response = await fetch(`${API_URL}/api/refresh`, {\n//       method: 'GET',\n//       credentials: 'include',\n//     });\n\n//     if (response.ok) {\n//       console.log('status ok')\n//       // const data = await response.json();\n//       // console.log('New access token:', data.accessToken);\n\n//       // localStorage.setItem('accessToken', data.accessToken);\n\n//       // return data.accessToken;\n//     } else {\n//       console.log('status not ok')\n//       if (response.status === 401) {\n//         console.log('status 401')\n\n//       }\n//       throw new Error('Failed to fetch new access token');\n//     }\n//   } catch (error) {\n//     console.error('Error:', error);\n//     // Handle error appropriately, possibly by redirecting to login\n//     throw error;\n//   }\n// };","map":{"version":3,"names":["api","API_URL","process","env","REACT_APP_API_URL","token","localStorage","getItem","console","log","loginUser","data","res","fetch","method","headers","credentials","body","JSON","stringify","ok","Error","result","json","setItem","accessToken","message","status","userRole","error","fetchWithAuth","url","options","refreshToken","errorMessage","text","response","post","withCredentials"],"sources":["C:/Users/Jan Kenneth/Desktop/projects/templates/MERN/student_frontend/src/assets/services/authServices.jsx"],"sourcesContent":["import api from \"../helpers/axios\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\nconst token = localStorage.getItem('accessToken');\r\nconsole.log('token: ',token)\r\n\r\nexport const loginUser = async (data) => {\r\n  try {\r\n    const res = await fetch(`${API_URL}/api/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(data)    \r\n    })\r\n    \r\n    if (!res.ok) {\r\n        throw new Error('Failed to fetch user profile');\r\n    }\r\n\r\n    const result = await res.json()\r\n    localStorage.setItem('accessToken', result.accessToken); \r\n\r\n    return { \r\n        message: result.message,\r\n        status: result.status,\r\n        accessToken: result.accessToken,\r\n        userRole: result.userRole\r\n    }\r\n} catch (error) {\r\n    console.log('Error signing in: ', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// const getTokenFromLocalStorage = () => {\r\n//   return localStorage.getItem('accessToken');\r\n// };\r\n\r\n// const addTokenToLocalStorage = (token) => {\r\n//   localStorage.setItem('accessToken', token);\r\n// };\r\n\r\nexport const fetchWithAuth = async (url, options = {}) => {\r\n  try {\r\n    let accessToken = localStorage.getItem('accessToken');\r\n\r\n    if (!accessToken) throw new Error('No access token found');\r\n\r\n    // Set the Authorization header for the request\r\n    options.headers = {\r\n      ...options.headers,\r\n      'Authorization': `Bearer ${accessToken}`,\r\n    };\r\n\r\n    let res = await fetch(url, options);\r\n\r\n    // Check if the response indicates the access token is expired\r\n    if (res.status === 403) {\r\n      console.log('Access token expired, attempting to refresh...');\r\n\r\n      // Attempt to refresh the token\r\n      accessToken = await refreshToken();\r\n\r\n      if (accessToken) {\r\n        options.headers['Authorization'] = `Bearer ${accessToken}`;\r\n        res = await fetch(url, options);\r\n      } else {\r\n        throw new Error('Failed to refresh token');\r\n      }\r\n    }\r\n\r\n    if (!res.ok) {\r\n      const errorMessage = await res.text();\r\n      throw new Error(`Request failed with status ${res.status}: ${errorMessage}`);\r\n    }\r\n\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error('Error fetching with auth:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to refresh the access token (using cookies for the refresh token)\r\nconst refreshToken = async () => {\r\n  try {\r\n    const response = await api.post('/refresh', {}, { withCredentials: true });\r\n    const { accessToken } = response.data;\r\n\r\n    // Update the local storage with the new access token\r\n    localStorage.setItem('accessToken', accessToken);\r\n\r\n    return accessToken;\r\n  } catch (error) {\r\n    console.error('Failed to refresh token:', error);\r\n    // Optionally, handle token refresh errors (e.g., redirect to login page)\r\n    return null;\r\n  }\r\n};\r\n\r\n// const refreshToken = async () => {\r\n//   // Add a response interceptor\r\n//   api.interceptors.response.use(\r\n//     (response) => response,\r\n//     async (error) => {\r\n//       const originalRequest = error.config;\r\n  \r\n//       // If the error status is 401 and there is no originalRequest._retry flag,\r\n//       // it means the token has expired and we need to refresh it\r\n//       if (error.response.status === 401 && !originalRequest._retry) {\r\n//         originalRequest._retry = true;\r\n  \r\n//         try {\r\n//           const refreshToken = localStorage.getItem('accessToken');\r\n//           const response = await axios.post('http://localhost:5000/api/refresh', { refreshToken });\r\n//           const { token } = response.accessToken;\r\n  \r\n//           localStorage.setItem('accessToken', token);\r\n  \r\n//           // Retry the original request with the new token\r\n//           originalRequest.headers.Authorization = `Bearer ${token}`;\r\n//           return axios(originalRequest);\r\n//         } catch (error) {\r\n//           // Handle refresh token error or redirect to login\r\n//         }\r\n//       }\r\n  \r\n//       return Promise.reject(error);\r\n//     }\r\n//   );\r\n//   // try {\r\n//   //   const resp = await api.get(\"/refresh\");\r\n//   //   console.log(\"refresh token\", resp.data);\r\n//   //   return resp.data;\r\n//   // } catch (e) {\r\n//   //   console.log(\"Error\",e);   \r\n//   // }\r\n// };\r\n\r\n// export const fetchWithAuth = async (url, options = {}) => {\r\n//   try {\r\n//     let accessToken = localStorage.getItem('accessToken');\r\n\r\n//     if (!accessToken) throw new Error('No access token found');\r\n\r\n//     options.headers = {\r\n//       ...options.headers,\r\n//       'Authorization': `Bearer ${accessToken}`,\r\n//     };\r\n\r\n//     let res = await fetch(url, options);\r\n\r\n//     if (res.status === 403) {\r\n//       console.log('Access token expired, attempting to refresh...');\r\n//       // accessToken = await fetchNewAccessToken();\r\n//       accessToken = await refreshToken();\r\n      \r\n//       if (accessToken) {\r\n//         options.headers['Authorization'] = `Bearer ${accessToken}`;\r\n//         res = await fetch(url, options);\r\n//       } else {\r\n//         throw new Error('Failed to refresh token');\r\n//       }\r\n//     }\r\n\r\n//     if (!res.ok) {\r\n//       const errorMessage = await res.text();\r\n//       throw new Error(`Request failed with status ${res.status}: ${errorMessage}`);\r\n//     }\r\n\r\n//     return await res.json();\r\n//   } catch (error) {\r\n//     console.error('Error fetching with auth:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// const fetchNewAccessToken = async () => {\r\n//   try {\r\n//     const response = await fetch(`${API_URL}/api/refresh`, {\r\n//       method: 'GET',\r\n//       credentials: 'include',\r\n//     });\r\n\r\n//     if (response.ok) {\r\n//       console.log('status ok')\r\n//       // const data = await response.json();\r\n//       // console.log('New access token:', data.accessToken);\r\n\r\n//       // localStorage.setItem('accessToken', data.accessToken);\r\n\r\n//       // return data.accessToken;\r\n//     } else {\r\n//       console.log('status not ok')\r\n//       if (response.status === 401) {\r\n//         console.log('status 401')\r\n        \r\n//       }\r\n//       throw new Error('Failed to fetch new access token');\r\n//     }\r\n//   } catch (error) {\r\n//     console.error('Error:', error);\r\n//     // Handle error appropriately, possibly by redirecting to login\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}