{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL;\nconst token = localStorage.getItem('accessToken');\nconsole.log('token: ', token);\nexport const loginUser = async data => {\n  try {\n    const res = await fetch(`${API_URL}/api/auth/login`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: 'include',\n      body: JSON.stringify(data)\n    });\n    if (!res.ok) {\n      throw new Error('Failed to fetch user profile');\n    }\n    const result = await res.json();\n    localStorage.setItem('accessToken', result.accessToken);\n    return {\n      message: result.message,\n      status: result.status,\n      accessToken: result.accessToken,\n      userRole: result.userRole\n    };\n  } catch (error) {\n    console.log('Error signing in: ', error);\n    throw error;\n  }\n};\nconst getTokenFromLocalStorage = () => {\n  return localStorage.getItem('accessToken');\n};\n\n// Helper function to save the token to localStorage\nconst addTokenToLocalStorage = token => {\n  localStorage.setItem('accessToken', token);\n};\nconst fetchNewAccessToken = async () => {\n  try {\n    const response = await customFetch.get(\"/api/refresh\", {\n      credentials: 'include'\n    });\n    if (response.status === 200) {\n      const data = response.data;\n      console.log('New access token:', data.accessToken);\n      addTokenToLocalStorage(data.accessToken);\n      return data.accessToken;\n    } else {\n      console.log('Failed to fetch new access token, status:', response.status);\n      throw new Error('Failed to fetch new access token');\n    }\n  } catch (error) {\n    console.error('Error fetching new access token:', error);\n    throw error;\n  }\n};\n\n// Custom fetch with request/response interceptors\nconst customFetch = async (url, options = {}) => {\n  try {\n    const token = getTokenFromLocalStorage();\n    if (token) {\n      options.headers = {\n        ...options.headers,\n        'Authorization': `Bearer ${token}`\n      };\n    }\n    let response = await fetch(url, options);\n\n    // Check if the response status indicates that the token is expired\n    if (response.status === 403 && !options._retry) {\n      console.log('Access token expired, attempting to refresh...');\n      options._retry = true; // Prevents infinite loop in case of continuous 403 errors\n\n      const newAccessToken = await fetchNewAccessToken();\n      if (newAccessToken) {\n        options.headers['Authorization'] = `Bearer ${newAccessToken}`;\n        response = await fetch(url, options);\n      } else {\n        throw new Error('Failed to refresh token');\n      }\n    }\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      throw new Error(`Request failed with status ${response.status}: ${errorMessage}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching with auth:', error);\n    throw error;\n  }\n};\n\n// Example of using the customFetch function\nconst fetchData = async () => {\n  try {\n    const data = await customFetch(`${API_URL}/api/some-protected-endpoint`, {\n      method: 'GET'\n    });\n    console.log('Fetched data:', data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","token","localStorage","getItem","console","log","loginUser","data","res","fetch","method","headers","credentials","body","JSON","stringify","ok","Error","result","json","setItem","accessToken","message","status","userRole","error","getTokenFromLocalStorage","addTokenToLocalStorage","fetchNewAccessToken","response","customFetch","get","url","options","_retry","newAccessToken","errorMessage","text","fetchData"],"sources":["C:/Users/Jan Kenneth/Desktop/projects/templates/MERN/student_frontend/src/assets/services/authServices.jsx"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL;\r\nconst token = localStorage.getItem('accessToken');\r\n\r\nconsole.log('token: ',token)\r\n\r\nexport const loginUser = async (data) => {\r\n  try {\r\n    const res = await fetch(`${API_URL}/api/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(data)    \r\n    })\r\n    \r\n    if (!res.ok) {\r\n        throw new Error('Failed to fetch user profile');\r\n    }\r\n\r\n    const result = await res.json()\r\n    localStorage.setItem('accessToken', result.accessToken); \r\n\r\n    return { \r\n        message: result.message,\r\n        status: result.status,\r\n        accessToken: result.accessToken,\r\n        userRole: result.userRole\r\n    }\r\n} catch (error) {\r\n    console.log('Error signing in: ', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nconst getTokenFromLocalStorage = () => {\r\n  return localStorage.getItem('accessToken');\r\n};\r\n\r\n// Helper function to save the token to localStorage\r\nconst addTokenToLocalStorage = (token) => {\r\n  localStorage.setItem('accessToken', token);\r\n};\r\n\r\nconst fetchNewAccessToken = async () => {\r\n  try {\r\n    const response = await customFetch.get(\"/api/refresh\", {\r\n      credentials: 'include',\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      const data = response.data;\r\n      console.log('New access token:', data.accessToken);\r\n\r\n      addTokenToLocalStorage(data.accessToken);\r\n\r\n      return data.accessToken;\r\n    } else {\r\n      console.log('Failed to fetch new access token, status:', response.status);\r\n      throw new Error('Failed to fetch new access token');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching new access token:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Custom fetch with request/response interceptors\r\nconst customFetch = async (url, options = {}) => {\r\n  try {\r\n    const token = getTokenFromLocalStorage();\r\n    if (token) {\r\n      options.headers = {\r\n        ...options.headers,\r\n        'Authorization': `Bearer ${token}`,\r\n      };\r\n    }\r\n\r\n    let response = await fetch(url, options);\r\n\r\n    // Check if the response status indicates that the token is expired\r\n    if (response.status === 403 && !options._retry) {\r\n      console.log('Access token expired, attempting to refresh...');\r\n\r\n      options._retry = true; // Prevents infinite loop in case of continuous 403 errors\r\n\r\n      const newAccessToken = await fetchNewAccessToken();\r\n\r\n      if (newAccessToken) {\r\n        options.headers['Authorization'] = `Bearer ${newAccessToken}`;\r\n        response = await fetch(url, options);\r\n      } else {\r\n        throw new Error('Failed to refresh token');\r\n      }\r\n    }\r\n\r\n    if (!response.ok) {\r\n      const errorMessage = await response.text();\r\n      throw new Error(`Request failed with status ${response.status}: ${errorMessage}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching with auth:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Example of using the customFetch function\r\nconst fetchData = async () => {\r\n  try {\r\n    const data = await customFetch(`${API_URL}/api/some-protected-endpoint`, {\r\n      method: 'GET',\r\n    });\r\n    console.log('Fetched data:', data);\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}