{"ast":null,"code":"import { fetchWithAuth } from \"./authServices\";\nconst API_URL = process.env.REACT_APP_API_URL;\nconst token = localStorage.getItem('accessToken');\n\n// console.log('token: ',token)\n\n// \nexport const getUsers = async () => {\n  try {\n    const res = await fetchWithAuth(`${API_URL}/api/users/`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n        // \"Authorization\": `Bearer ${token}`\n      }\n    });\n    if (!res.ok) {\n      throw new Error('Failed to fetch user profile');\n    }\n    const result = await res.json();\n    return result.data;\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    throw error;\n  }\n};\nexport const getUser = async id => {\n  try {\n    const res = await fetch(`${API_URL}/api/users/${id}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    if (!res.ok) {\n      throw new Error('Failed to fetch user profile');\n    }\n    const result = await res.json();\n    return result.data;\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    throw error;\n  }\n};\nexport const createUser = async data => {\n  try {\n    const res = await fetch(`${API_URL}/api/users/create`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify(data)\n    });\n    const result = await res.json();\n    return {\n      message: result.message,\n      status: result.status\n    };\n  } catch (error) {\n    console.error('Error creating user:', error);\n    throw error;\n  }\n};\nexport const editUser = async (id, data) => {\n  try {\n    const res = await fetch(`${API_URL}/api/users/update/${id}`, {\n      method: 'PUT',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify(data)\n    });\n    if (!res.ok) {\n      throw new Error('Failed to update user');\n    }\n    const result = await res.json();\n    return {\n      status: result.status,\n      message: result.message\n    };\n  } catch (error) {\n    console.error('Error updating user: ', error);\n    throw error;\n  }\n};\nexport const deleteUser = async id => {\n  try {\n    const res = await fetch(`${API_URL}/api/users/archive`, {\n      method: 'DELETE',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        id\n      })\n    });\n    if (!res.ok) {\n      throw new Error('Failed to update user');\n    }\n    const result = await res.json();\n    return {\n      status: result.status,\n      message: result.message\n    };\n  } catch (error) {\n    console.error('Error deleting user: ', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["fetchWithAuth","API_URL","process","env","REACT_APP_API_URL","token","localStorage","getItem","getUsers","res","method","headers","ok","Error","result","json","data","error","console","getUser","id","fetch","createUser","body","JSON","stringify","message","status","editUser","deleteUser"],"sources":["C:/Users/Jan Kenneth/Desktop/projects/templates/MERN/student_frontend/src/assets/services/adminService.jsx"],"sourcesContent":["import { fetchWithAuth } from \"./authServices\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\nconst token = localStorage.getItem('accessToken');\r\n\r\n// console.log('token: ',token)\r\n\r\n// \r\nexport const getUsers = async () => {\r\n  try {\r\n    const res = await fetchWithAuth(`${API_URL}/api/users/`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        // \"Authorization\": `Bearer ${token}`\r\n      },\r\n    });\r\n\r\n    if (!res.ok) {\r\n      throw new Error('Failed to fetch user profile');\r\n    }\r\n\r\n    const result = await res.json();\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error('Error fetching users:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getUser = async (id) => {\r\n    try {\r\n        const res = await fetch(`${API_URL}/api/users/${id}`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${token}`\r\n            }\r\n        })\r\n        if (!res.ok) {\r\n            throw new Error('Failed to fetch user profile');\r\n        }\r\n    \r\n        const result = await res.json();\r\n        return result.data;\r\n    } catch (error) {\r\n        console.error('Error fetching users:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const createUser = async (data) => {\r\n    try {\r\n      const res = await fetch(`${API_URL}/api/users/create`, {\r\n        method: 'POST',\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(data)\r\n      });\r\n  \r\n      const result = await res.json();\r\n      return {\r\n        message: result.message,\r\n        status: result.status\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error('Error creating user:', error);\r\n      throw error;\r\n    }\r\n}  \r\n\r\nexport const editUser = async (id, data) => {\r\n  try {\r\n    const res = await fetch(`${API_URL}/api/users/update/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n\r\n    if (!res.ok) {\r\n      throw new Error('Failed to update user');\r\n    }\r\n    const result = await res.json()\r\n    return {\r\n      status: result.status,\r\n      message: result.message\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating user: ', error)\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const deleteUser = async (id) => {\r\n  try {\r\n    const res = await fetch(`${API_URL}/api/users/archive`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify({ id })\r\n    })\r\n\r\n    if (!res.ok) {\r\n      throw new Error('Failed to update user');\r\n    }\r\n\r\n    const result = await res.json()\r\n    return{ \r\n      status: result.status,\r\n      message: result.message\r\n    }\r\n  } catch (error) {\r\n    console.error('Error deleting user: ',error)\r\n    throw error;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}